max@T470:~/git/eigene/stunden_zettel$ ppi
Python 3.8.10 (default, Jun 22 2022, 20:18:18) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import date
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'date'
>>> import datetime
>>> datetime(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'module' object is not callable
>>> datetime.date
datetime.date(          datetime.datetime(      datetime.datetime_CAPI  
>>> datetime.date(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: function missing required argument 'month' (pos 2)
>>> datetime.date(1,2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: function missing required argument 'day' (pos 3)
>>> datetime.date(1,2,2)
datetime.date(1, 2, 2)
>>> datetime.date.
datetime.date.ctime(            datetime.date.isoformat(        datetime.date.resolution
datetime.date.day               datetime.date.isoweekday(       datetime.date.strftime(
datetime.date.fromisocalendar(  datetime.date.max               datetime.date.timetuple(
datetime.date.fromisoformat(    datetime.date.min               datetime.date.today(
datetime.date.fromordinal(      datetime.date.month             datetime.date.toordinal(
datetime.date.fromtimestamp(    datetime.date.mro(              datetime.date.weekday(
datetime.date.isocalendar(      datetime.date.replace(          datetime.date.year
>>> datetime.date.day
<attribute 'day' of 'datetime.date' objects>
>>> datetime.date.to
datetime.date.today(      datetime.date.toordinal(  
>>> datetime.date.to
datetime.date.today(      datetime.date.toordinal(  
>>> datetime.date.today()
datetime.date(2022, 8, 4)
>>> datetime.date.month
<attribute 'month' of 'datetime.date' objects>
>>> t= datetime.date.today()
>>> x= datetime.t
datetime.time(       datetime.timedelta(  datetime.timezone(   datetime.tzinfo(
>>> x= datetime.datetime.(t.year,t.month,1)
  File "<stdin>", line 1
    x= datetime.datetime.(t.year,t.month,1)
                         ^
SyntaxError: invalid syntax
>>> x= datetime.datetime(t.year,t.month,1) 
>>> x
datetime.datetime(2022, 8, 1, 0, 0)
>>> x+21
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'datetime.datetime' and 'int'
>>> x+datetime.21
datetime.MAXYEAR        datetime.datetime(      datetime.time(          datetime.tzinfo(
datetime.MINYEAR        datetime.datetime_CAPI  datetime.timedelta(     
datetime.date(          datetime.sys            datetime.timezone(      
>>> x+datetime.time21
datetime.time(       datetime.timedelta(  datetime.timezone(   
>>> x+datetime.timedelta(days=30)
datetime.datetime(2022, 8, 31, 0, 0)
>>> x+datetime.timedelta(days=31)
datetime.datetime(2022, 9, 1, 0, 0)
>>> x+datetime.timedelta(days=31)
datetime.datetime(2022, 9, 1, 0, 0)
>>> 
>>> x+datetime.timedelta(month=1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'month' is an invalid keyword argument for __new__()
>>> x+datetime.timedelta(months=1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'months' is an invalid keyword argument for __new__()
>>> 
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ nano google_cal.py 
max@T470:~/git/eigene/stunden_zettel$ mv google_cal.py gcal.py
max@T470:~/git/eigene/stunden_zettel$ cat gcal.py 
from gcsa.event import Event
from gcsa.google_calendar import GoogleCalendar
from datetime import datetime as dt

#calendar_haushalt = GoogleCalendar("regg900o16pp20bc9fcbnud2gg@group.calendar.google.com")
calendar_arbeit= GoogleCalendar('raspmaxcal@gmail.com')

start = dt(2022, 4, 1, 21, 0)
end = dt(2020, 8, 3, 22, 0)


def add_termin(titel, start, end):
    event = Event(titel, start, end)
    calendar_haushalt.add_event(event)

# noch letzte Woche automatisch einstellen hinzufügen.. start aktuelle kw-1 bis ende
#allgemeine Funktion für Zeitraum
def check_events(time_start, time_end,name_of_job):
#    for i in calendar_arbeit.get_events(time_start, time_end):

    for i in calendar_arbeit.get_events():
            print(i.summary)  
#
#    #        if name_of_job in i.summary:
#            print("Termin'{}'.".format(name_of_job))
#            return (i.start.isocalendar()[1])
#        else:
#            return(False)

def return_event_on_day(datetime_date):
    start= datetime.datetime.combine(datetime_date,datetime.time(hour=0))
    end = start+ datetime.timedelta(hours=23,minutes=59)
    for i in calendar_arbeit.get_events(time_min=start,time_max=end):
        if i is None:
            return False
        else:
            return i




def get_events_month(month:int):
    t = dt.today()
#    for i in calendar_arbeit.get_events(time_start, time_end):
    x = calendar_arbeit[dt(t.year,t.month,1):t]
    return list(x)
    
check_events(start,end,"janet")
max@T470:~/git/eigene/stunden_zettel$ nano google_cal.py ^C   
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py 
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> get_events_month(8)
[<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-03-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-01 17:15:00+02:00 - Janet Nachhilfe 17:15>, <Event 2022-08-03 17:15:00+02:00 - Janet Nachhilfe 17:15>]
>>> get_events_month(8
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ nano google_cal.py      
max@T470:~/git/eigene/stunden_zettel$ nano gcal.py 
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py        
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> get_events_month(8)
[<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-03-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-01 17:15:00+02:00 - Janet Nachhilfe 17:15>, <Event 2022-08-03 17:15:00+02:00 - Janet Nachhilfe 17:15>]
>>> help(calendar_arbeit.get_
calendar_arbeit.get_event(      calendar_arbeit.get_events(     calendar_arbeit.get_instances(
>>> help(calendar_arbeit.get_events) 

>>> 
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py 
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> get_events_month(8)             
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "gcal.py", line 45, in get_events_month
    x = calendar_arbeit.getEvents(dt(t.year,t.month,1,0,0),t)
AttributeError: 'GoogleCalendar' object has no attribute 'getEvents'
>>> get_events_month(8)
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py 
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> get_events_month(8)
[<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-03-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-01 17:15:00+02:00 - Janet Nachhilfe 17:15>, <Event 2022-08-03 17:15:00+02:00 - Janet Nachhilfe 17:15>]
>>> help(calendar_arbeit.get_events)

>>> get_events_month(8)             
[<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-03-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-01 17:15:00+02:00 - Janet Nachhilfe 17:15>, <Event 2022-08-03 17:15:00+02:00 - Janet Nachhilfe 17:15>]
>>> 
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py 
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> calendar_arbeit.get_
calendar_arbeit.get_event(      calendar_arbeit.get_events(     calendar_arbeit.get_instances(
>>> 
KeyboardInterrupt
>>> 
max@T470:~/git/eigene/stunden_zettel$ nano gcal.py 
max@T470:~/git/eigene/stunden_zettel$ ppi gcal.py  
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
VSE 13:30-17:00
>>> calendar_haushalt.get_events(dt(2022,7,1),dt.today())
<generator object GoogleCalendar.get_events at 0x7fb6cb1687b0>
>>> list(calendar_haushalt.get_events(dt(2022,7,1),dt.today()))
[<Event 2020-04-25 15:00:00+02:00 - Treppenhaus putzen-manueller Termin >, <Event 2022-07-07 16:00:00+02:00 - Rezept besorgen Citalo>]
>>> calendar_arbeit.get_events()   
<generator object GoogleCalendar.get_events at 0x7fb6cb168820>
>>> get_events_month(8)                                        
[<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-03-30 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-01 17:15:00+02:00 - Janet Nachhilfe 17:15>, <Event 2022-08-03 17:15:00+02:00 - Janet Nachhilfe 17:15>]
>>> x=get_events_month(8)       
>>> for i in x:
...     print(i.start,i.end,i.summary)
... 
2021-09-30 13:30:00+02:00 2021-09-30 17:00:00+02:00 VSE 13:30-17:00
2022-03-30 13:30:00+02:00 2022-03-30 17:00:00+02:00 VSE 13:30-17:00
2022-08-01 17:15:00+02:00 2022-08-01 18:30:00+02:00 Janet Nachhilfe 17:15
2022-08-03 17:15:00+02:00 2022-08-03 18:20:00+02:00 Janet Nachhilfe 17:15
>>> x=get_events_month(8)
>>> x[0]
<Event 2021-09-30 13:30:00+02:00 - VSE 13:30-17:00>
>>> a=x[0]
>>> a.
a.add_attachment(              a.default_reminders            a.other
a.add_attendee(                a.description                  a.recurrence
a.add_email_reminder(          a.end                          a.recurring_event_id
a.add_popup_reminder(          a.event_id                     a.reminders
a.add_reminder(                a.guests_can_invite_others     a.start
a.attachments                  a.guests_can_modify            a.summary
a.attendees                    a.guests_can_see_other_guests  a.timezone
a.color_id                     a.id                           a.transparency
a.conference_solution          a.is_recurring_instance        a.updated
a.created                      a.location                     a.visibility
a.creator                      a.organizer                    
>>> a.event_id
'nv6f5nrsmk3mn5ag199btequvb'
>>> calendar_arbeit.get_instances(a.event_id)
<generator object GoogleCalendar.get_instances at 0x7fb6cb1689e0>
>>> x=calendar_arbeit.get_instances(a.event_id)
>>> x=list(x)
>>> x
[<Event 2022-09-01 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-08 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-15 13:30:00+02:00 - VSE 13:30-17:00>, <Event 2022-08-22 13:30:00+02:00 - VSE 13:30-17:00>]
>>> for i in x:
...     print(i.start,i.end,i.summary)
... 
2022-09-01 13:30:00+02:00 2022-09-01 17:00:00+02:00 VSE 13:30-17:00
2022-08-08 13:30:00+02:00 2022-08-08 17:00:00+02:00 VSE 13:30-17:00
2022-08-15 13:30:00+02:00 2022-08-15 17:00:00+02:00 VSE 13:30-17:00
2022-08-22 13:30:00+02:00 2022-08-22 17:00:00+02:00 VSE 13:30-17:00
>>> x=get_events_month(8)
>>> b=x[1]
>>> b.event_id
'rk4gjq6eir3ssufitctqhbmq6k'
>>> x=calendar_arbeit.get_instances(b.event_id)
>>> x=list(x)
>>> for i in x:
...     print(i.start,i.end,i.summary)
... 
2022-08-10 13:30:00+02:00 2022-08-10 17:00:00+02:00 VSE 13:30-17:00
2022-08-17 13:30:00+02:00 2022-08-17 17:00:00+02:00 VSE 13:30-17:00
2022-08-24 13:30:00+02:00 2022-08-24 17:00:00+02:00 VSE 13:30-17:00
2022-08-31 13:30:00+02:00 2022-08-31 17:00:00+02:00 VSE 13:30-17:00
2022-09-07 13:30:00+02:00 2022-09-07 17:00:00+02:00 VSE 13:30-17:00
>>> 
